/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => AutoDescriptionPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  apiProvider: "kimi",
  apiKey: "",
  model: "moonshot-v1-8k",
  summaryLength: 150,
  customPrompt: "\u8BF7\u4E3A\u4EE5\u4E0B\u5185\u5BB9\u751F\u6210\u4E00\u4E2A\u7B80\u6D01\u7684\u6458\u8981\uFF0C\u4E0D\u8D85\u8FC7{length}\u5B57\uFF1A",
  availableCategories: ["Blog", "C++", "Git", "linux", "\u5F00\u6E90\u9879\u76EE", "\u6570\u636E\u5E93", "\u7B97\u6CD5", "\u8BA1\u7B97\u673A\u4F53\u7CFB\u7ED3\u6784"]
};
var AutoDescriptionPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "generate-description",
      name: "\u751F\u6210\u6587\u7AE0\u6458\u8981",
      editorCallback: (editor, view) => {
        this.generateDescription(editor, view);
      }
    });
    this.addSettingTab(new AutoDescriptionSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async generateDescription(editor, view) {
    const content = editor.getValue();
    if (!content || content.trim() === "") {
      new import_obsidian.Notice("\u6587\u6863\u5185\u5BB9\u4E3A\u7A7A\uFF0C\u65E0\u6CD5\u751F\u6210\u6458\u8981");
      return;
    }
    if (!this.settings.apiKey) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EAPI\u5BC6\u94A5");
      return;
    }
    new import_obsidian.Notice("\u6B63\u5728\u751F\u6210\u6458\u8981\u548C\u6807\u7B7E...");
    try {
      const { summary, tags } = await this.callLLMApi(content);
      await this.insertSummaryToFrontMatter(editor, summary, tags);
      new import_obsidian.Notice("\u6458\u8981\u548C\u6807\u7B7E\u751F\u6210\u6210\u529F\uFF01");
    } catch (error) {
      console.error("\u751F\u6210\u65F6\u51FA\u9519:", error);
      new import_obsidian.Notice(`\u751F\u6210\u5931\u8D25: ${error.message}`);
    }
  }
  async callLLMApi(content) {
    const summaryPrompt = this.settings.customPrompt.replace("{length}", this.settings.summaryLength.toString());
    const tagsPrompt = `\u8BF7\u5206\u6790\u6587\u7AE0\u5185\u5BB9\uFF0C\u751F\u62103-5\u4E2A\u6700\u76F8\u5173\u7684\u6807\u7B7E\uFF0C\u6BCF\u4E2A\u6807\u7B7E\u9650\u5236\u57281-4\u4E2A\u5B57\u4E4B\u95F4\u3002\u8BF7\u76F4\u63A5\u8FD4\u56DE\u6807\u7B7E\uFF0C\u7528\u9017\u53F7\u5206\u9694\u3002`;
    switch (this.settings.apiProvider) {
      case "kimi":
        const summary = await this.callKimi(content, summaryPrompt);
        const tagsResponse = await this.callKimi(content, tagsPrompt);
        const tags = tagsResponse.split(/[,，、\n]/).map((tag) => tag.trim()).filter((tag) => tag.length > 0);
        return { summary, tags };
      default:
        throw new Error(`\u4E0D\u652F\u6301\u7684API\u63D0\u4F9B\u5546: ${this.settings.apiProvider}`);
    }
  }
  async callKimi(content, prompt) {
    var _a;
    const response = await fetch("https://api.moonshot.cn/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.settings.apiKey}`
      },
      body: JSON.stringify({
        model: this.settings.model,
        messages: [
          {
            role: "system",
            content: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u6587\u7AE0\u6458\u8981\u751F\u6210\u52A9\u624B\uFF0C\u8BF7\u6839\u636E\u7528\u6237\u63D0\u4F9B\u7684\u5185\u5BB9\u751F\u6210\u7B80\u6D01\u3001\u51C6\u786E\u7684\u6458\u8981\u3002"
          },
          {
            role: "user",
            content: `${prompt}

${content}`
          }
        ],
        max_tokens: this.settings.summaryLength * 2,
        temperature: 0.3
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`Kimi API\u9519\u8BEF: ${((_a = data.error) == null ? void 0 : _a.message) || "\u672A\u77E5\u9519\u8BEF"}`);
    }
    return data.choices[0].message.content.trim();
  }
  async callTencent(content, prompt) {
    var _a;
    const response = await fetch("https://hunyuan.cloud.tencent.com/hyllm/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.settings.apiKey}`
      },
      body: JSON.stringify({
        model: this.settings.model,
        messages: [
          {
            role: "system",
            content: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u6587\u7AE0\u6458\u8981\u751F\u6210\u52A9\u624B\uFF0C\u8BF7\u6839\u636E\u7528\u6237\u63D0\u4F9B\u7684\u5185\u5BB9\u751F\u6210\u7B80\u6D01\u3001\u51C6\u786E\u7684\u6458\u8981\u3002"
          },
          {
            role: "user",
            content: `${prompt}

${content}`
          }
        ],
        temperature: 0.3,
        stream: false,
        top_p: 0.7,
        max_tokens: this.settings.summaryLength * 2
      })
    });
    const data = await response.json();
    console.log("\u817E\u8BAF\u5143\u5B9DAPI\u8FD4\u56DE\u6570\u636E:", data);
    if (!response.ok) {
      throw new Error(`\u817E\u8BAF\u5143\u5B9DAPI\u9519\u8BEF: ${((_a = data.error) == null ? void 0 : _a.message) || "\u672A\u77E5\u9519\u8BEF"}`);
    }
    if (data.choices && data.choices[0] && data.choices[0].delta) {
      return data.choices[0].delta.content.trim();
    } else if (data.choices && data.choices[0] && data.choices[0].message) {
      return data.choices[0].message.content.trim();
    } else {
      console.error("\u817E\u8BAF\u5143\u5B9DAPI\u8FD4\u56DE\u6570\u636E\u7ED3\u6784:", data);
      throw new Error("\u817E\u8BAF\u5143\u5B9DAPI\u8FD4\u56DE\u683C\u5F0F\u5F02\u5E38");
    }
  }
  async callQianwen(content, prompt) {
    var _a;
    const response = await fetch("https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.settings.apiKey}`
      },
      body: JSON.stringify({
        model: this.settings.model,
        input: {
          messages: [
            {
              role: "system",
              content: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u6587\u7AE0\u6458\u8981\u751F\u6210\u52A9\u624B\uFF0C\u8BF7\u6839\u636E\u7528\u6237\u63D0\u4F9B\u7684\u5185\u5BB9\u751F\u6210\u7B80\u6D01\u3001\u51C6\u786E\u7684\u6458\u8981\u3002"
            },
            {
              role: "user",
              content: `${prompt}

${content}`
            }
          ]
        },
        parameters: {
          max_tokens: this.settings.summaryLength * 2,
          temperature: 0.3
        }
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`\u5343\u95EEAPI\u9519\u8BEF: ${((_a = data.error) == null ? void 0 : _a.message) || "\u672A\u77E5\u9519\u8BEF"}`);
    }
    return data.output.text.trim();
  }
  async callDeepseek(content, prompt) {
    var _a;
    const response = await fetch("https://api.deepseek.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.settings.apiKey}`
      },
      body: JSON.stringify({
        model: this.settings.model,
        messages: [
          {
            role: "system",
            content: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u6587\u7AE0\u6458\u8981\u751F\u6210\u52A9\u624B\uFF0C\u8BF7\u6839\u636E\u7528\u6237\u63D0\u4F9B\u7684\u5185\u5BB9\u751F\u6210\u7B80\u6D01\u3001\u51C6\u786E\u7684\u6458\u8981\u3002"
          },
          {
            role: "user",
            content: `${prompt}

${content}`
          }
        ],
        max_tokens: this.settings.summaryLength * 2,
        temperature: 0.3
      })
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(`DeepSeek API\u9519\u8BEF: ${((_a = data.error) == null ? void 0 : _a.message) || "\u672A\u77E5\u9519\u8BEF"}`);
    }
    return data.choices[0].message.content.trim();
  }
  async insertSummaryToFrontMatter(editor, summary, tags) {
    const content = editor.getValue();
    let newContent = "";
    const selectedCategories = await this.showCategorySelector();
    if (content.startsWith("---")) {
      const endOfFrontMatter = content.indexOf("---", 3);
      if (endOfFrontMatter !== -1) {
        const frontMatter = content.substring(0, endOfFrontMatter);
        const restContent = content.substring(endOfFrontMatter);
        let updatedFrontMatter = frontMatter;
        if (frontMatter.includes("description:")) {
          updatedFrontMatter = updatedFrontMatter.replace(/description:.*?($|\n)/, `description: "${summary}"
`);
        } else {
          updatedFrontMatter += `description: "${summary}"
`;
        }
        if (tags.length > 0) {
          if (frontMatter.includes("tags:")) {
            updatedFrontMatter = updatedFrontMatter.replace(/tags:[\s\S]*?(?=\n\w|$)/, `tags:
${tags.map((tag) => `  - ${tag}`).join("\n")}`);
          } else {
            updatedFrontMatter += `tags:
${tags.map((tag) => `  - ${tag}`).join("\n")}
`;
          }
        }
        if (selectedCategories.length > 0) {
          if (frontMatter.includes("categories:")) {
            updatedFrontMatter = updatedFrontMatter.replace(/categories:[\s\S]*?(?=\n\w|$)/, `categories:
${selectedCategories.map((category) => `  - ${category}`).join("\n")}`);
          } else {
            updatedFrontMatter += `categories:
${selectedCategories.map((category) => `  - ${category}`).join("\n")}
`;
          }
        }
        newContent = updatedFrontMatter + restContent;
      }
    } else {
      newContent = `---
description: "${summary}"
` + (tags.length > 0 ? `tags:
${tags.map((tag) => `  - ${tag}`).join("\n")}
` : "") + (selectedCategories.length > 0 ? `categories:
${selectedCategories.map((category) => `  - ${category}`).join("\n")}
` : "") + "---\n\n" + content;
    }
    editor.setValue(newContent);
  }
  async showTagSelector() {
    return new Promise((resolve) => {
      const modal = new TagSelectorModal(this.app, this.settings.availableTags, resolve);
      modal.open();
    });
  }
  async showCategorySelector() {
    return new Promise((resolve) => {
      const modal = new CategorySelectorModal(this.app, this.settings.availableCategories, resolve);
      modal.open();
    });
  }
};
var AutoDescriptionSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  getDefaultModelForProvider(provider) {
    switch (provider) {
      case "kimi":
        return "moonshot-v1-8k";
      default:
        return "moonshot-v1-8k";
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u81EA\u52A8\u6458\u8981\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("API\u63D0\u4F9B\u5546").setDesc("\u9009\u62E9\u5927\u8BED\u8A00\u6A21\u578BAPI\u63D0\u4F9B\u5546").addDropdown((dropdown) => dropdown.addOption("kimi", "Kimi (Moonshot)").setValue(this.plugin.settings.apiProvider).onChange(async (value) => {
      this.plugin.settings.apiProvider = value;
      this.plugin.settings.model = this.getDefaultModelForProvider(value);
      await this.plugin.saveSettings();
      this.display();
    }));
    let apiKeyDescription = "\u8F93\u5165\u4F60\u7684Kimi API\u5BC6\u94A5\uFF0C\u53EF\u4ECE https://platform.moonshot.cn/console/api-keys \u83B7\u53D6";
    new import_obsidian.Setting(containerEl).setName("API\u5BC6\u94A5").setDesc(apiKeyDescription).addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u578B").setDesc("\u9009\u62E9Kimi\u6A21\u578B").addDropdown((dropdown) => dropdown.addOption("moonshot-v1-8k", "Moonshot V1 8K").addOption("moonshot-v1-32k", "Moonshot V1 32K").addOption("moonshot-v1-128k", "Moonshot V1 128K").setValue(this.plugin.settings.model).onChange(async (value) => {
      this.plugin.settings.model = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6458\u8981\u957F\u5EA6").setDesc("\u8BBE\u7F6E\u751F\u6210\u6458\u8981\u7684\u6700\u5927\u5B57\u7B26\u6570").addSlider((slider) => slider.setLimits(50, 500, 10).setValue(this.plugin.settings.summaryLength).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.summaryLength = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u53EF\u9009\u5206\u7C7B").setDesc("\u8BBE\u7F6E\u53EF\u9009\u7684\u6587\u7AE0\u5206\u7C7B\uFF08\u6BCF\u884C\u4E00\u4E2A\uFF09").addTextArea((text) => text.setPlaceholder("\u7F16\u7A0B\n\u5B66\u4E60\n\u5DE5\u5177").setValue(this.plugin.settings.availableCategories.join("\n")).onChange(async (value) => {
      this.plugin.settings.availableCategories = value.split("\n").filter((category) => category.trim() !== "");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u81EA\u5B9A\u4E49\u63D0\u793A\u8BCD").setDesc("\u8BBE\u7F6E\u751F\u6210\u6458\u8981\u7684\u63D0\u793A\u8BCD\u6A21\u677F\uFF0C\u4F7F\u7528{length}\u8868\u793A\u6458\u8981\u957F\u5EA6").addTextArea((text) => text.setPlaceholder("\u8BF7\u4E3A\u4EE5\u4E0B\u5185\u5BB9\u751F\u6210\u4E00\u4E2A\u7B80\u6D01\u7684\u6458\u8981\uFF0C\u4E0D\u8D85\u8FC7{length}\u5B57\uFF1A").setValue(this.plugin.settings.customPrompt).onChange(async (value) => {
      this.plugin.settings.customPrompt = value;
      await this.plugin.saveSettings();
    })).addExtraButton((button) => {
      button.setIcon("reset").setTooltip("\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u63D0\u793A\u8BCD").onClick(async () => {
        this.plugin.settings.customPrompt = DEFAULT_SETTINGS.customPrompt;
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
};
var TagSelectorModal = class extends import_obsidian.Modal {
  constructor(app, availableTags, onSubmit) {
    super(app);
    this.selectedTags = [];
    this.availableTags = availableTags;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u9009\u62E9\u6807\u7B7E\uFF08\u53EF\u591A\u9009\uFF09" });
    const container = contentEl.createDiv({ cls: "tag-container" });
    container.style.maxHeight = "300px";
    container.style.overflowY = "auto";
    container.style.marginBottom = "20px";
    this.availableTags.forEach((tag) => {
      const checkboxContainer = container.createDiv({ cls: "checkbox-container" });
      checkboxContainer.style.marginBottom = "8px";
      const input = checkboxContainer.createEl("input", {
        type: "checkbox",
        attr: { value: tag, id: `tag-${tag}` }
      });
      const label = checkboxContainer.createEl("label", {
        text: tag,
        attr: { for: `tag-${tag}` }
      });
      label.style.marginLeft = "8px";
      input.addEventListener("change", (e) => {
        const target = e.target;
        if (target.checked) {
          this.selectedTags.push(tag);
        } else {
          this.selectedTags = this.selectedTags.filter((t) => t !== tag);
        }
      });
    });
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "space-between";
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.close();
      this.onSubmit([]);
    });
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u5B9A", cls: "mod-cta" });
    confirmButton.addEventListener("click", () => {
      this.close();
      this.onSubmit(this.selectedTags);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CategorySelectorModal = class extends import_obsidian.Modal {
  constructor(app, availableCategories, onSubmit) {
    super(app);
    this.selectedCategory = "";
    this.availableCategories = availableCategories;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u9009\u62E9\u5206\u7C7B\uFF08\u5355\u9009\uFF09" });
    const newCategoryContainer = contentEl.createDiv({ cls: "new-category-container" });
    newCategoryContainer.style.marginBottom = "20px";
    const input = newCategoryContainer.createEl("input", {
      type: "text",
      placeholder: "\u8F93\u5165\u65B0\u5206\u7C7B\u540D\u79F0"
    });
    input.style.width = "200px";
    input.style.marginRight = "10px";
    const addButton = newCategoryContainer.createEl("button", {
      text: "\u6DFB\u52A0\u65B0\u5206\u7C7B",
      cls: "mod-cta"
    });
    addButton.addEventListener("click", async () => {
      const newCategory = input.value.trim();
      if (newCategory && !this.availableCategories.includes(newCategory)) {
        this.availableCategories.push(newCategory);
        this.app.plugins.plugins["auto-description"].settings.availableCategories = this.availableCategories;
        await this.app.plugins.plugins["auto-description"].saveSettings();
        this.onOpen();
      }
    });
    const container = contentEl.createDiv({ cls: "category-container" });
    container.style.maxHeight = "300px";
    container.style.overflowY = "auto";
    container.style.marginBottom = "20px";
    this.availableCategories.forEach((category) => {
      const radioContainer = container.createDiv({ cls: "radio-container" });
      radioContainer.style.marginBottom = "8px";
      const input2 = radioContainer.createEl("input", {
        type: "radio",
        attr: {
          value: category,
          id: `category-${category}`,
          name: "category"
        }
      });
      const label = radioContainer.createEl("label", {
        text: category,
        attr: { for: `category-${category}` }
      });
      label.style.marginLeft = "8px";
      input2.addEventListener("change", (e) => {
        const target = e.target;
        if (target.checked) {
          this.selectedCategory = category;
        }
      });
    });
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "space-between";
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.close();
      this.onSubmit([]);
    });
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u5B9A", cls: "mod-cta" });
    confirmButton.addEventListener("click", () => {
      this.close();
      this.onSubmit(this.selectedCategory ? [this.selectedCategory] : []);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
